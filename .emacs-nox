(menu-bar-mode -1)
;;显示行号
(global-display-line-numbers-mode t)
;;在ModeLine显示列号
(add-hook 'prog-mode-hook 'column-number-mode)
;;代码的折叠
(add-hook 'prog-mode-hook 'hs-minor-mode)
;; 自动重载更改的文件
(global-auto-revert-mode 1)
;; 基本设置
(setq-default
 window-combination-resize t                      ;; 新窗口平均其他左右窗口
 x-stretch-cursor t                               ;; 将光标拉伸到字形宽度
 )

(setq ring-bell-function 'ignore
      initial-scratch-message nil
      inhibit-startup-message t
      auto-save-file-name-transforms '((".*" "~/.emacs.d/data/backup/" t)) ;; Write auto-save files to a separate directory
      backup-directory-alist '(("." . "~/.emacs.d/data/backup/"))          ;; Write backup files to a separate directory
      create-lockfiles nil                                                 ;; Disable lockfiles as I use only one Emacs instance
      scroll-conservatively 10000 ;;防止页面滚动时跳动
      undo-limit 80000000           ;; 提升撤销限制
      display-time-default-load-average nil ;; 不显示系统负载
      )

;; 时间显示设置
;; (setq display-time-24hr-format t   ;; 时间使用24小时制
;;       display-time-day-and-date t   ;; 时间显示包括日期和具体时间
;;       display-time-interval 10   ;; 时间的变化频率
;;       display-time-format "%Y-%m-%d %A %H:%M") ;; 显示完整日期
;; ;; 启用时间显示设置,在minibuffer上面的那个杠上
;; (display-time-mode 1)   
;; ;; 立即强制刷新一次时间
;; (display-time-update)

;; 使用 Fira Code Nerd Font 字体
(set-face-attribute 'default nil
                    :font "FiraCode Nerd Font"
                    :height 120)  ;; 120=12pt，可根据需求调整

;; wsl与windos共享剪切版
(defun my/clipboard-to-windows (text &optional push)
  (let ((process-connection-type nil))
    (with-temp-buffer
      (insert text)
      (call-process-region (point-min) (point-max) "win32yank.exe" nil nil nil "-i"))))

(defun my/clipboard-from-windows ()
  (string-trim-right
   (with-output-to-string
     (call-process "win32yank.exe" nil standard-output nil "-o"))))

(setq interprogram-cut-function 'my/clipboard-to-windows)
(setq interprogram-paste-function 'my/clipboard-from-windows)



(defalias 'yes-or-no-p 'y-or-n-p)
;;不要创建备份文件
(setq make-backup-files nil)
;;不要创建lock文件
(setq create-lockfiles nil)
;; 不使用 TAB 字符，使用空格
(setq-default indent-tabs-mode nil)
;; tab 宽度设为 2 空格
(setq-default tab-width 4)             
;; 当光标移动到边缘时，窗口每次只滚动一行
(setq scroll-step 1)

;;开启可视化换行，自动折行
(global-visual-line-mode 1)
;; 括号匹配
(electric-pair-mode 1)

(add-hook 'prog-mode-hook 'hs-minor-mode) ;代码的折叠

(global-set-key (kbd "C-/") 'undo-only)
(global-set-key (kbd "C-?") 'undo-redo)
;; 快捷键绑定：使用调整窗口大小
(global-set-key (kbd "M-<up>")    'enlarge-window)
(global-set-key (kbd "M-<down>")  'shrink-window)
(global-set-key (kbd "M-<left>")  'shrink-window-horizontally)
(global-set-key (kbd "M-<right>") 'enlarge-window-horizontally)

;; 中文显示
(set-language-environment "utf-8")
(set-buffer-file-coding-system 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-selection-coding-system 'utf-8)
(set-default-coding-systems 'utf-8)
(set-clipboard-coding-system 'utf-8)
(modify-coding-system-alist 'process "*" 'utf-8)
(prefer-coding-system 'utf-8)
(setq-default pathname-coding-system 'utf-8)
(setq
 default-process-coding-system '(utf-8 . utf-8)
 locale-coding-system 'utf-8
 file-name-coding-system 'utf-8
 default-buffer-file-coding-system 'utf-8
 slime-net-coding-system 'utf-8-unix)

(setenv "LC_CTYPE" "UTF-8")
(setenv "LC_ALL" "en_US.UTF-8")
(setenv "LANG" "en_US.UTF-8")  

(setq find-file-encoding 'auto)
(setq-default coding-system-for-read 'utf-8)
(setq-default coding-system-for-write 'utf-8)

;; 设置镜像源
;;(setq package-archives
;;      '(("melpa" . "https://melpa.org/packages/")
;;        ("gnu"   . "https://elpa.gnu.org/packages/")))
(setq package-archives '(("gnu"    . "https://mirrors.tuna.tsinghua.edu.cn/elpa/gnu/")
                         ("nongnu" . "https://mirrors.tuna.tsinghua.edu.cn/elpa/nongnu/")
                         ("melpa"  . "https://mirrors.tuna.tsinghua.edu.cn/elpa/melpa/")))

(use-package package
  :config
  (unless (bound-and-true-p package--initialized)
    (package-initialize)))

(setq use-package-always-ensure t)

;;doom主题
(use-package doom-themes
  :ensure t
  :init
  :config
  (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
        doom-themes-enable-italic t) ; if nil, italics is universally disable
  ;; 加载主题（例如 doom-one）
  (load-theme 'doom-tomorrow-night t)
  ;; 启用可选配置
  ;; 高亮当前行
  (doom-themes-visual-bell-config)
  ;; 改善 Org-mode 颜色
  (doom-themes-org-config))

(defun my/kill-scratch-buffer ()
  "在 Emacs 启动时关闭 *scratch* buffer."
  (when (get-buffer "*scratch*")
    (kill-buffer "*scratch*")))
(add-hook 'emacs-startup-hook #'my/kill-scratch-buffer)

;; tab栏显示buffer
(use-package centaur-tabs
  :ensure t
  :demand
  :init
  :config

  (defun centaur-tabs-hide-tab (x)
    "自定义隐藏规则：隐藏特殊或无文件 buffer."
    (let ((name (format "%s" x)))
      (or
       ;; 无文件 buffer 一律隐藏
       (not (buffer-file-name x))
       ;; 专用窗口
       (window-dedicated-p (selected-window))
       ;; 临时 buffer
       (string-prefix-p "*" name)
       (string-prefix-p " " name)
       ;; Magit 非文件 buffer
       (and (string-prefix-p "magit" name)
            (not (file-name-extension name))))))
  
  (setq centaur-tabs-style "bar"
        centaur-tabs-set-bar 'over
        centaur-tabs-enable-key-bindings nil
        centaur-tabs-set-icons t
        centaur-tabs-icon-type 'nerd-icons
        centaur-tabs-set-close-button nil
        centaur-tabs-show-new-tab-button nil
        centaur-tabs-cycle-scope 'tabs)
  ;;启用插件
  (centaur-tabs-mode t)
  :bind
  ("C-<left>" . centaur-tabs-backward)
  ("C-<right>" . centaur-tabs-forward))

;; modeline主题
(use-package doom-modeline
  :ensure t
  :after nyan-mode
  :custom
  (doom-modeline-buffer-file-name-style 'truncate-all)
  :init (doom-modeline-mode 1))

;;显示进度条
(use-package nyan-mode
  :ensure t
  :init
  (nyan-mode 1))

;;文件导航栏
(use-package neotree
  :ensure t
  :bind (("C-x t" . neotree-toggle))
  :config
  (setq neo-theme 'nerd-icons)
  (setq neo-smart-open t)       ;;  打开时自动跳到当前文件路径
  (setq neo-show-hidden-files t);;  显示隐藏文件
  )

;; (use-package nerd-icons
;;   :custom
;;   ;; The Nerd Font you want to use in GUI
;;   ;; "Symbols Nerd Font Mono" is the default and is recommended
;;   ;; but you can use any other Nerd Font if you want
;;    (nerd-icons-font-family "FiraCode Nerd Font")
;;   )


;;预览要跳转的行
(use-package goto-line-preview :ensure t
  :bind (("M-g g" . goto-line-preview)))


;;代码整行上移下移
(use-package move-dup
  :bind (("M-p"   . move-dup-move-lines-up)
     ;;    ("C-M-p" . move-dup-duplicate-up)
         ("M-n"   . move-dup-move-lines-down)
     ;;    ("C-M-n" . move-dup-duplicate-down)
         ))

(use-package exec-path-from-shell
  :ensure t
  :config
  (when (memq window-system '(mac ns x))
    (exec-path-from-shell-initialize)))

;; Git工具
(use-package magit
  :ensure t
  :defer t
  :bind (("C-x g" . magit-log-all))
)
;; 语法解析
(use-package tree-sitter
  :when (and (fboundp 'treesit-available-p)
             (treesit-available-p))
  :config (setq treesit-font-lock-level 4)
  :init
  (setq treesit-language-source-alist
        '((bash       . ("https://github.com/tree-sitter/tree-sitter-bash"))
          (c          . ("https://github.com/tree-sitter/tree-sitter-c"))
          (cpp        . ("https://github.com/tree-sitter/tree-sitter-cpp"))
          (python     . ("https://github.com/tree-sitter/tree-sitter-python"))
          (rust       . ("https://github.com/tree-sitter/tree-sitter-rust"))
          (toml       . ("https://github.com/tree-sitter/tree-sitter-toml"))
          (elisp      . ("https://github.com/Wilfred/tree-sitter-elisp"))
          (cmake      . ("https://github.com/uyha/tree-sitter-cmake"))
          (dockerfile . ("https://github.com/camdencheek/tree-sitter-dockerfile"))
          (make       . ("https://github.com/alemuller/tree-sitter-make"))
          (yaml       . ("https://github.com/ikatyang/tree-sitter-yaml"))
          (json       . ("https://github.com/tree-sitter/tree-sitter-json"))
          (java       . ("https://github.com/tree-sitter/tree-sitter-java.git"))
          (markdown   . ("https://github.com/MDeiml/tree-sitter-markdown" nil "tree-sitter-markdown/src"))
          ))

  ;;没有内置<languate>-mode的需要添加
  (add-to-list 'auto-mode-alist '("\\.y[a]?ml\\'" . yaml-ts-mode))
  (add-to-list 'auto-mode-alist '("\\(?:Dockerfile\\(?:\\..*\\)?\\|\\.[Dd]ockerfile\\)\\'" . dockerfile-mode))
)

;; 安装 tree-sitter 语法解析器（仅 Emacs 29+）
(dolist (lang '(bash c cpp python rust toml elisp cmake dockerfile make yaml json java markdown))
  (unless (treesit-language-available-p lang)
    (treesit-install-language-grammar lang)))

;; 优先使用 Tree-sitter mode
(setq major-mode-remap-alist
      '((bash-mode        . bash-ts-mode)
        (c-mode           . c-ts-mode)
        (c++-mode         . c++-ts-mode)
        (python-mode      . python-ts-mode)
        (rust-mode        . rust-ts-mode)
        (conf-toml-mode   . toml-ts-mode)
        (elisp-mode  . elisp-ts-mode)
        (cmake-mode       . cmake-ts-mode)
        (dockerfile-mode  . dockerfile-ts-mode)
        (json-mode        . json-ts-mode)
        (java-mode        . java-ts-mode)
        (yaml-mode        . yaml-ts-mode)
        (makefile-mode    . makefile-ts-mode)
        ))
;; 语法检查
;; (use-package flycheck
;;   :ensure t
;;   :config
;;   (setq truncate-lines nil) ; 如果单行信息很长会自动换行
;;   :hook
;;   (prog-mode . flycheck-mode))


;; lsp语言服务器配置
(require 'eglot)

(setq eglot-server-programs
      '(((c++-mode c-mode c++-ts-mode c-ts-mode)     . ("clangd"))
        ((rust-mode rust-ts-mode)                    . ("rust-analyzer"))
        ((asm-mode nasm-mode)                        . ("asm-lsp"))
        ((python-mode python-ts-mode)                . ("pyright-langserver" "--stdio"))
        ((java-mode java-ts-mode)                    . ("jdtls"))
        ((bash-mode bash-ts-mode sh-mode sh-ts-mode) . ("bash-language-server" "start"))
        ))

;; eglot快捷键
(global-set-key (kbd "M-,") 'xref-find-definitions)  ;; 跳转到定义
(global-set-key (kbd "M-.") 'xref-pop-marker-stack)  ;; 跳回
(global-set-key (kbd "M-?") 'xref-find-references)   ;; 查找引用

;;自动打开eglot
(dolist (hook '(c-mode-hook c-ts-mode-hook
                c++-mode-hook c++-ts-mode-hook
                rust-mode-hook rust-ts-mode-hook
                asm-mode-hook nasm-mode-hook
                python-mode-hook python-ts-mode-hook
                java-mode-hook java-ts-mode-hook
                bash-mode-hook bash-ts-mode-hook
                sh-mode-hook sh-ts-mode-hook))
  (add-hook hook 'eglot-ensure))

;; comment
(defun my-cpp-line-comments ()
  "Use // comments instead of /* */ in C/C++."
  (setq-local comment-start "// "
              comment-end ""
              comment-start-skip "//+\\s-*"))

(dolist (hook '(c-mode-hook c++-mode-hook c-ts-mode-hook c++-ts-mode-hook
                rust-mode-hook rust-ts-mode-hook python-mode-hook python-ts-mode-hook java-mode-hook java-ts-mode-hook))
  (add-hook hook #'my-cpp-line-comments))

;; 自动补全
(use-package company :ensure t :defer t
  :hook (after-init . global-company-mode))

;; 格式化
(use-package format-all
  :ensure t
  :commands format-all-mode
  :hook (prog-mode . format-all-mode)
  :config
  (setq-default format-all-formatters
                '(("C" (clang-format))
                  ("C++"     (clang-format))
                  ("rust" (rustfmt))
                  )))

(global-set-key (kbd "C-x f") 'format-all-buffer)


;; which-key 显示键绑定提示
(use-package which-key
  :ensure t
  :config
  (which-key-mode))
;; 窗格切换
(use-package ace-window
  :ensure t
  :bind (("M-o" . ace-window)))
;; 窗格移动
(use-package buffer-move
  :ensure t
  :bind (("C-c <up>"    . buf-move-up)
         ("C-c <down>"  . buf-move-down)
         ("C-c <left>"  . buf-move-left)
         ("C-c <right>" . buf-move-right)))
;; 智能按键C-a C-c k
(use-package crux
  :bind (("C-a" . 'crux-move-beginning-of-line)
         ("C-c k" . 'crux-smart-kill-line)))
;; 项目识别,通过创建.projectile文件识别为一个项目
(use-package projectile
  :ensure t
  :init
  (projectile-mode +1)
  :bind-keymap
  ("C-c p" . projectile-command-map)
  :config
  (setq projectile-project-search-path '("~/repository"))
  (setq projectile-completion-system 'auto))  ;; 或 ivy / helm / default

;; (defun my-vscode-layout ()
;;   "Neotree 左侧，右侧上下分为代码和 eshell，放大代码窗口，焦点回代码。"
;;   (interactive)
;;   (let ((orig-buffer (current-buffer)))
;;     ;; 删除所有窗口，统一布局
;;     (delete-other-windows)
;;     ;; 打开 Neotree（会自动左右分割）
;;     (neotree-show)
;;     ;; 选中右侧工作区
;;     (select-window (next-window))
;;     ;; 上下分割：上是代码，下是 eshell
;;     (split-window-below)
;;     ;; 当前是上窗口，记录下来
;;     (let ((code-win (selected-window)))
;;       ;; 选中下窗口并打开 eshell
;;       (other-window 1)
;;       (eshell)
;;       ;; 回到上窗口并还原 buffer
;;       (select-window code-win)
;;       (switch-to-buffer orig-buffer)
;;       ;; 放大代码区窗口，让 eshell 更小（例如放大 10 行）
;;       (enlarge-window 10)
;;       )))

;; (global-set-key (kbd "C-c v") #'my-vscode-layout)

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages nil))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
